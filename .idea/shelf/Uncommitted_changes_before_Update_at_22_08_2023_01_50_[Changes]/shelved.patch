Index: visuals.kv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><View>:\r\n    \r\n\r\n\r\n    canvas:\r\n        Color:\r\n            rgb: 61 / 255, 43 / 255, 52 / 255\r\n        \r\n        Rectangle:\r\n            pos:0,0\r\n            size: 400,400\r\n\r\n    \r\n    Graph:\r\n        id:grph\r\n        size: 400,400\r\n        pos_hint: {'center_x':0.3, 'center_y':0.7}\r\n\r\n            \r\n    Confirm:\r\n        id: butn\r\n        pos_hint: {'center_x':0.2, 'center_y':0.1}\r\n        size_hint: 0.1,0.1\r\n        on_press: root.press()\r\n        background_color: \"#40444a\"\r\n\r\n\r\n    Label:\r\n        id:title\r\n        text:\"welcome\"\r\n        pos_hint: {'center_x':0.5, 'center_y':0.5}\r\n        size_hint: 0.2,0.2\r\n\r\n\r\n    Label:\r\n        id:temp\r\n        text:\"erg\"\r\n        pos_hint: {'center_x':0.8, 'center_y':0.3}\r\n        size_hint: 0.15, 0.15\r\n\r\n    Label:\r\n        id: set_t\r\n        text: \"No temperature target set\"\r\n        size: 20,20\r\n        pos: 100,140\r\n        color: \"red\"\r\n\r\n\r\n    TextInput:\r\n        multiline:False\r\n        on_text: root.on_text()\r\n        id:target\r\n        pos_hint:{'center_x': 0.1,'center_y': 0.1}\r\n        size_hint:0.2,0.1\r\n        background_color: \"#d69c38\"\r\n\r\n    Button:\r\n        text:'change'\r\n        id: redraw\r\n        on_press: root.refresh()\r\n        size_hint: 0.1,0.1\r\n        pos: 900,100\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/visuals.kv b/visuals.kv
--- a/visuals.kv	(revision 12f78d7b86408670ff7d1ef4f78a24e994470ee2)
+++ b/visuals.kv	(date 1692661743885)
@@ -1,7 +1,6 @@
+#:kivy 2.2.1
 <View>:
     
-
-
     canvas:
         Color:
             rgb: 61 / 255, 43 / 255, 52 / 255
@@ -13,16 +12,10 @@
     
     Graph:
         id:grph
-        size: 400,400
+        size_hint: 0.7,0.7
         pos_hint: {'center_x':0.3, 'center_y':0.7}
 
             
-    Confirm:
-        id: butn
-        pos_hint: {'center_x':0.2, 'center_y':0.1}
-        size_hint: 0.1,0.1
-        on_press: root.press()
-        background_color: "#40444a"
 
 
     Label:
@@ -48,10 +41,11 @@
 
     TextInput:
         multiline:False
-        on_text: root.on_text()
+        on_text_validate: root.on_text()
         id:target
         pos_hint:{'center_x': 0.1,'center_y': 0.1}
-        size_hint:0.2,0.1
+        size_hint: 0.3,0.1
+        size_hint_max_y: 30
         background_color: "#d69c38"
 
     Button:
Index: connection_module.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import serial.tools.list_ports\r\nimport serial\r\n\r\n\r\n\r\ndef start():\r\n    portlist = []\r\n    portinfo = serial.tools.list_ports.comports()\r\n    for one in portinfo: print(str(one)); portlist.append(str(one)[:(str(one).find(\" \"))])\r\n    connection = serial.Serial(baudrate=115200)\r\n\r\n    if portlist:\r\n\r\n        for i in range(len(portlist)):\r\n            try:\r\n                connection.port = portlist[i]\r\n                connection.open()\r\n            except:\r\n                pass\r\n\r\n    else:\r\n        # exit()\r\n        pass\r\n    return connection\r\n\r\ndef filter_temp(string):\r\n    if \"rd \" in string:\r\n        return string[3:]\r\n\r\n\r\n# def main():\r\n#     filter_temp(\"rd 47\")\r\n#\r\n#\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connection_module.py b/connection_module.py
--- a/connection_module.py	(revision 12f78d7b86408670ff7d1ef4f78a24e994470ee2)
+++ b/connection_module.py	(date 1692661743880)
@@ -1,31 +1,77 @@
-import serial.tools.list_ports
+from serial.tools.list_ports_windows import comports
 import serial
+import config
+import threading
+import queue
 
+class USB_device:
+    def __init__(self) -> None:
+        self.connection = None
+        self.COMport = None
+        self.setts = config.Config("settings.cfg")
+        self.queue = queue.Queue()
+        self.commands = config.Config("commands.cfg")
 
+    def find_device_port(self):
+        portinfo = comports()
+        if portinfo:
 
-def start():
-    portlist = []
-    portinfo = serial.tools.list_ports.comports()
-    for one in portinfo: print(str(one)); portlist.append(str(one)[:(str(one).find(" "))])
-    connection = serial.Serial(baudrate=115200)
-
-    if portlist:
-
-        for i in range(len(portlist)):
-            try:
-                connection.port = portlist[i]
-                connection.open()
-            except:
-                pass
-
-    else:
-        # exit()
-        pass
-    return connection
+            for com,info,id in sorted(portinfo):
+                print(com, ": ",info )
+                if str(self.setts["device.vendor_id"]+":"+self.setts["device.product_id"])in id:
+                    return com
+        else:
+            raise Exception("no devices found")
+            
+    def start_connection(self,com):
+        connection = serial.Serial(baudrate=115200)
+        try:
+            connection.port = com
+            print("connected to port ",com)
+            connection.open()
+            return connection
+        except:
+            del connection
+            raise Exception("could not connect to port ",com)
+            
+    def _threadloop(self):
+        while True:
+            if not self.queue.empty():
+                command = self.queue.get()
+                self.connection.write(command)
+            else:
+                pass
+            
+    def start(self,queue,con):
+        self.COMport= self.find_device_port()
+        self.start_connection(self.COMport)
+        
+        thr = threading.Thread(target=self._threadloop, args=())
+
+
 
-def filter_temp(string):
-    if "rd " in string:
-        return string[3:]
+def write_target_temp(connection, temp):
+    connection.write("wt "+str(temp).encode('utf-8'))
+    print("wt "+str(temp).encode('utf-8'))
+    
+    
+
+    
+    
+# def list_vendors():
+#     import usb.core
+
+# # find USB devices
+#     dev = usb.core.find(find_all=True)
+#     # loop through devices, printing vendor and product ids in decimal and hex
+#     for cfg in dev:
+#         sys.stdout.write('Decimal VendorID=' + str(cfg.idVendor) + ' & ProductID=' + str(cfg.idProduct) + '\n')
+#         sys.stdout.write('Hexadecimal VendorID=' + hex(cfg.idVendor) + ' & ProductID=' + hex(cfg.idProduct) + '\n\n')
+        
+#     #pyserial list comports
+#     print("pyserial list comports output   ")
+#     for port, desc, hwid in sorted(comports()):
+#         print("{}: {} [{}]".format(port, desc, hwid))
 
 
 # def main():
@@ -35,4 +81,4 @@
 #
 #
 # if __name__ == '__main__':
-#     main()
+#     start()
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>numpy\r\nkivy\r\nmatplotlib\r\npyserial
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 12f78d7b86408670ff7d1ef4f78a24e994470ee2)
+++ b/requirements.txt	(date 1692661743884)
@@ -1,4 +1,7 @@
 numpy
 kivy
 matplotlib
-pyserial
\ No newline at end of file
+pyserial
+kivy-garden
+pyusb
+config
\ No newline at end of file
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\n\r\nimport connection_module\r\nimport matplotlib\r\nfrom matplotlib import pyplot as plt\r\nimport numpy\r\n# matplotlib.use('qtagg')\r\nmatplotlib.use('module://kivy.garden.matplotlib.backend_kivy')\r\n# noinspection PyUnresolvedReferences\r\nfrom kivy.garden.matplotlib.backend_kivyagg import FigureCanvas, NavigationToolbar2Kivy, FigureCanvasKivyAgg\r\nfrom kivy.lang import Builder\r\nfrom kivy.app import App\r\nfrom kivy.uix.widget import Widget\r\nfrom kivy.uix.floatlayout import FloatLayout\r\nfrom kivy.uix.boxlayout import BoxLayout\r\nfrom kivy.uix.button import Button\r\nfrom kivy.properties import (NumericProperty, StringProperty, ReferenceListProperty, ObjectProperty)\r\nfrom kivy.config import Config\r\nfrom kivy.clock import Clock\r\nimport connection_module\r\nfrom kivy.uix.label import Label\r\nfrom kivy.core.window import Window\r\n\r\nWindow.size = (1000,800)\r\nWindow.clearcolor = (61 / 255, 43 / 255, 52 / 255, 1)\r\nConfig.set('graphics', 'width', '200')\r\nConfig.set('graphics', 'height', '200')\r\nBuilder.load_file(\"visuals.kv\")\r\nglob_counter = 0\r\n\r\nclass Graph(FigureCanvasKivyAgg):\r\n    out = plt.figure()\r\n    plt.ion()\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Graph, self).__init__(figure=self.out, **kwargs)\r\n\r\n    ax = out.add_subplot(111)\r\n    out.set(facecolor=(0, 0, 0, 0))\r\n    signal = [7, 89.6, 45. - 56.34]\r\n    signal = np.array(signal)\r\n\r\n    ax.plot(signal)\r\n    ax.set_xlabel('Time(s)')\r\n\r\n    # setting y label\r\n    ax.set_ylabel('signal (norm)')\r\n    ax.xaxis.label.set_color('white')\r\n    ax.yaxis.label.set_color('white')\r\n    ax.grid(True, color='lightgray')\r\n    # ax.draw()\r\n\r\n\r\nclass Confirm(Button):\r\n    holder = 0\r\n\r\n\r\nclass View(FloatLayout):\r\n    connection = connection_module.start()\r\n\r\n    def on_text(self):\r\n        Confirm.holder = self.ids.target.text\r\n        print(Confirm.holder)\r\n\r\n    def press(self):\r\n        self.ids.set_t.text = str(self.ids.butn.holder)\r\n        # self.connection.write(str(self.ids.butn.holder).encode('utf-8'))\r\n\r\n    def update(self, *args):\r\n\r\n        try:\r\n            self.ids.temp.text = connection_module.filter_temp(self.connection.readline().decode('utf-8'))\r\n        except:\r\n            pass\r\n\r\n    def refresh(self, *args):\r\n        print(\"button\")\r\n\r\n        self.ids.grph.ax.clear()\r\n        self.ids.grph.ax.set(facecolor=(0, 1, 0, 1))\r\n        # self.ids.grph.ax.show()\r\n        #\r\n        self.ids.grph.ax.plot(self.ids.grph.signal)\r\n        self.ids.grph.draw()\r\n        self.ids.grph.flush_events()\r\n\r\n\r\n\r\nclass GUIapp(App):\r\n    def on_start(self):\r\n        Clock.schedule_interval(self.root.update, 0.5)\r\n\r\n    def build(self):\r\n        return View()\r\n\r\n\r\nif __name__ == '__main__':\r\n    GUIapp().run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 12f78d7b86408670ff7d1ef4f78a24e994470ee2)
+++ b/main.py	(date 1692661743884)
@@ -1,13 +1,10 @@
 import numpy as np
-
+import graph_class
 import connection_module
 import matplotlib
 from matplotlib import pyplot as plt
 import numpy
-# matplotlib.use('qtagg')
 matplotlib.use('module://kivy.garden.matplotlib.backend_kivy')
-# noinspection PyUnresolvedReferences
-from kivy.garden.matplotlib.backend_kivyagg import FigureCanvas, NavigationToolbar2Kivy, FigureCanvasKivyAgg
 from kivy.lang import Builder
 from kivy.app import App
 from kivy.uix.widget import Widget
@@ -17,10 +14,11 @@
 from kivy.properties import (NumericProperty, StringProperty, ReferenceListProperty, ObjectProperty)
 from kivy.config import Config
 from kivy.clock import Clock
-import connection_module
+from connection_module import USB_device
 from kivy.uix.label import Label
 from kivy.core.window import Window
 
+
 Window.size = (1000,800)
 Window.clearcolor = (61 / 255, 43 / 255, 52 / 255, 1)
 Config.set('graphics', 'width', '200')
@@ -28,67 +26,37 @@
 Builder.load_file("visuals.kv")
 glob_counter = 0
 
-class Graph(FigureCanvasKivyAgg):
-    out = plt.figure()
-    plt.ion()
-
-    def __init__(self, **kwargs):
-        super(Graph, self).__init__(figure=self.out, **kwargs)
-
-    ax = out.add_subplot(111)
-    out.set(facecolor=(0, 0, 0, 0))
-    signal = [7, 89.6, 45. - 56.34]
-    signal = np.array(signal)
-
-    ax.plot(signal)
-    ax.set_xlabel('Time(s)')
 
-    # setting y label
-    ax.set_ylabel('signal (norm)')
-    ax.xaxis.label.set_color('white')
-    ax.yaxis.label.set_color('white')
-    ax.grid(True, color='lightgray')
-    # ax.draw()
 
-
-class Confirm(Button):
-    holder = 0
 
 
 class View(FloatLayout):
-    connection = connection_module.start()
-
+    device = USB_device()
     def on_text(self):
-        Confirm.holder = self.ids.target.text
-        print(Confirm.holder)
+        self.ids.set_t.text = self.ids.target.text
 
     def press(self):
         self.ids.set_t.text = str(self.ids.butn.holder)
         # self.connection.write(str(self.ids.butn.holder).encode('utf-8'))
 
-    def update(self, *args):
-
-        try:
-            self.ids.temp.text = connection_module.filter_temp(self.connection.readline().decode('utf-8'))
-        except:
-            pass
 
     def refresh(self, *args):
         print("button")
 
         self.ids.grph.ax.clear()
         self.ids.grph.ax.set(facecolor=(0, 1, 0, 1))
-        # self.ids.grph.ax.show()
-        #
         self.ids.grph.ax.plot(self.ids.grph.signal)
         self.ids.grph.draw()
         self.ids.grph.flush_events()
-
+        pass
+    
+    def update_graph(self, *args):
+        # self.
+        pass
 
-
 class GUIapp(App):
-    def on_start(self):
-        Clock.schedule_interval(self.root.update, 0.5)
+    # def on_start(self):
+        # Clock.schedule_interval(self.root.update, 0.5)
 
     def build(self):
         return View()
